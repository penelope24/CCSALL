digraph generated {
    // nodes
    n0  [label="void way(Queue<Integer> queue)", line=5, slices="[]"];
    n1  [label="int last = 10", line=6, slices="[]"];
    n2  [label="int[] a = new int[last]", line=7, slices="[]"];
    n3  [label="String[] b = new String[last]", line=8, slices="[]"];
    n4  [label="for(int i = 0;i < last;i++)", line=9, slices="[]"];
    n5  [label="a[i] = 0", line=10, slices="[]"];
    n6  [label="System.out.println(a)", line=22, slices="[]"];
    n7  [label="b[i] = String.valueOf(i)", line=11, slices="[]"];
    n8  [label="while (!queue.isEmpty())", line=12, slices="[]"];
    n9  [label="int t = queue.poll()", line=13, slices="[]"];
    n10  [label="if (t == 0)", line=14, slices="[]"];
    n11  [label="a[i] = a[i] + 1", line=15, slices="[]"];
    n12  [label="else", line=17, slices="[]"];
    n13  [label="b[i] = String.valueOf(i + 1)", line=18, slices="[]"];
    // edges
    n0 -> n1  [type="control_flow"];
    n1 -> n2  [type="control_flow"];
    n2 -> n3  [type="control_flow"];
    n3 -> n4  [type="control_flow"];
    n4 -> n5  [type="control_flow"];
    n4 -> n6  [type="control_flow"];
    n5 -> n7  [type="control_flow"];
    n7 -> n8  [type="control_flow"];
    n8 -> n9  [type="control_flow"];
    n8 -> n4  [type="control_flow"];
    n9 -> n10  [type="control_flow"];
    n10 -> n11  [type="control_flow"];
    n10 -> n12  [type="control_flow"];
    n11 -> n8  [type="control_flow"];
    n12 -> n13  [type="control_flow"];
    n13 -> n8  [type="control_flow"];
    n0 -> n9  [type="data_flow"];
    n1 -> n3  [type="data_flow"];
    n5 -> n6  [type="data_flow"];
    n9 -> n10  [type="data_flow"];
    n4 -> n5  [type="data_flow"];
    n2 -> n5  [type="data_flow"];
    n5 -> n7  [type="data_flow"];
    n7 -> n11  [type="data_flow"];
    n0 -> n8  [type="data_flow"];
    n2 -> n6  [type="data_flow"];
    n7 -> n13  [type="data_flow"];
    n3 -> n7  [type="data_flow"];
    n11 -> n6  [type="data_flow"];
    n1 -> n2  [type="data_flow"];
    n5 -> n11  [type="data_flow"];
    // end of graph
}