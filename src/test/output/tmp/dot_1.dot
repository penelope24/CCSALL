digraph SLICE_{
  v1  [label="124:  Predicate<AccountState> cansee(String change) throws QueryParseException, PermissionBackendException"];
  v2  [label="127:  Optional<ChangeNotes> changeNotes = args.changeFinder.findOne(change)"];
  v3  [label="128:  if (!changeNotes.isPresent())"];
  v4  [label="129:  throw error(String.format('change %s not found', change))"];
  v5  [label="131:  if (changeNotes.get().getChange().isPrivate())"];
  v6  [label="132:  Account.Id caller = self()"];
  v7  [label="142:  if (!args.permissionBackend.user(args.getUser()).change(changeNotes.get()).test(ChangePermission.READ))"];
  v8  [label="133:  ChangeData cd = args.changeDataFactory.create(changeNotes.get())"];
  v9  [label="146:  throw error(String.format('change %s not found', change))"];
  v10  [label="148:  return AccountPredicates.cansee(args, changeNotes.get())"];
  v11  [label="134:  Account.Id owner = cd.change().getOwner()"];
  v12  [label="135:  ImmutableSet<Account.Id> reviewersAndCC = cd.reviewers().all()"];
  v13  [label="136:  if (!(caller.equals(owner) || reviewersAndCC.contains(caller)))"];
  v14  [label="137:  throw error(String.format('change %s not found', change))"];
  v15  [label="139:  return orAccountPredicate(ImmutableList.<Account.Id>builder().add(owner).addAll(reviewersAndCC).build())"];
  v1 -> v2  [label=""];
  v2 -> v3  [label=""];
  v3 -> v4  [label=""];
  v3 -> v5  [label=""];
  v4 -> v1  [label=""];
  v5 -> v6  [label=""];
  v5 -> v7  [label=""];
  v6 -> v8  [label=""];
  v7 -> v9  [label=""];
  v7 -> v10  [label=""];
  v8 -> v11  [label=""];
  v9 -> v1  [label=""];
  v11 -> v12  [label=""];
  v12 -> v13  [label=""];
  v13 -> v14  [label=""];
  v13 -> v15  [label=""];
  v14 -> v1  [label=""];
  v15 -> v7  [label=""];
  v2 -> v8  [color=red, label=" ()"];
  v6 -> v13  [color=red, label=" ()"];
  v2 -> v7  [color=red, label=" ()"];
  v2 -> v10  [color=red, label=" ()"];
  v2 -> v3  [color=red, label=" ()"];
  v11 -> v13  [color=red, label=" ()"];
  v1 -> v14  [color=red, label=" ()"];
  v1 -> v4  [color=red, label=" ()"];
  v8 -> v11  [color=red, label=" ()"];
  v12 -> v15  [color=red, label=" ()"];
  v11 -> v15  [color=red, label=" ()"];
  v1 -> v9  [color=red, label=" ()"];
  v2 -> v5  [color=red, label=" ()"];
  v8 -> v12  [color=red, label=" ()"];
  v1 -> v2  [color=red, label=" ()"];
  v12 -> v13  [color=red, label=" ()"];
   // end-of-graph
}
